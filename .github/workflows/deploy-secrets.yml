name: "Deploy Secrets to AWS Secrets Manager"

on: workflow_dispatch

jobs:
  deploy-secrets:
    name: "Deploy to AWS Secrets Manager"
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Verify Terraform Script
        id: create-backend-verify
        working-directory: ./SSG-API-Testing-Application-v2/lambda/deploy/
        run: |
          terraform fmt
          terraform fmt -check
      
      - name: Initialise Backend
        id: init-backend
        working-directory: ./SSG-API-Testing-Application-v2/lambda/deploy/
        run: terraform init

      - name: Validate Terraform Script
        id: create-backend-validate
        working-directory: ./SSG-API-Testing-Application-v2/lambda/deploy/
        run: terraform validate
        
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        working-directory: ./SSG-API-Testing-Application-v2/lambda/deploy/
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TF_VAR_secret_value: ${{ secrets.AWS_SECRET }}
        run: terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        working-directory: ./SSG-API-Testing-Application-v2/lambda/deploy/
        id: apply
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TF_VAR_secret_value: ${{ secrets.AWS_SECRET }}
        run: terraform apply -auto-approve
        continue-on-error: true
